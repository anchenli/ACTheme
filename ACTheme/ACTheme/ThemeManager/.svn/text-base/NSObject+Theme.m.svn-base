//
//  NSObject+Theme.m
//  PodDe
//
//  Created by lizhanpeng on 17/9/19.
//  Copyright © 2017年 anchen. All rights reserved.
//

#import "NSObject+Theme.h"
#import <UIKit/UIKit.h>
#import <objc/runtime.h>
#import "ThemeManager.h"

#define UIColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0xFF00) >> 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]

const NSString *ThemeEM_AID   =    @"ThemeEM_AID";
const NSString *ObjSave       =    @"ObjSave";

@implementation NSObject (Theme)

-(void)T_SetThemeEM:(_ThemeC_EM)EM{
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(changeTheme) name:C_THEME_Notifiction object:nil];

    [self setThemeEM_V:EM];
    [self changeTheme];
}

- (void)changeTheme{
    
    _ThemeC_EM EM = [self getThemEM];
    switch (EM) {
        case _Theme_ViewControllerBacColor:
            [self C_ViewControllerBacColor];
            break;
        case _Theme_GreyFontColor:
            [self C_GreyFontColor];
            break;
        case _Theme_NomalFontColor:
            [self C_NomalFontColor];
            break;
        case _Theme_TableBacColor:
            [self C_Theme_TableBacColor];
            break;
        case _Theme_ViewComBackColor:
            [self C_ViewComBackColor];
            break;
        case _Theme_BackgroungColor:
            [self C_BackgroungColor];
            break;
        case _Theme_ViewColor_Grey:
            [self C_ViewColor_Grey];
            break;
        case _Theme_ZixunShichangButtonBordColor:
            [self C_ZixunShichangButtonBordColor];
            break;
        case _Theme_ButtonFontColor_BW:
            [self C_ButtonFontColor_BW];
            break;
        case _Theme_ButtonFontColor_WG:
            [self C_ButtonFontColor_WG];
            break;
        case _Theme_ViewColor_BlueY:
            [self C_ViewColor_BlueY];
            break;
        case _Theme_LabelTextColor_WB:
            [self C_Theme_LabelTextColor_WB];
            break;
        case _Theme_BackColor_WB:
            [self C_Theme_BackColor_WB];
            break;
        case _Theme_ButtonTintColor_BY:
            [self C_Theme_ButtonTintColor_BY];
            break;
        case _Theme_ButtonTintColor_BG:
            [self C_Theme_ButtonTintColor_BG];
            break;
        case _Theme_ButtonTintColor_WG:
            [self C_Theme_ButtonTintColor_WG];
            break;
        case _Theme_LineColor:
            [self C_Theme_LineColor];
            break;
        case _Theme_ButtonBacColor_BB:
            [self C_Theme_ButtonBacColor_BB];
            break;
        case _Theme_ViewColor_BlackY:
        case _Theme_BackColor_YB:
            [self C_ViewColor_BlackY];
            break;
        case _Theme_ImgColor_GB:
            [self C_ButtonImgColor_GB];
            break;
        case _Theme_FontColor_GB:
            [self C_FontColor_GB];
            break;
        case _Theme_ButtonTintColor_BB:
            [self C_ButtonTintColor_BB];
            break;
        case _Theme_ButtonLayerColor_BB:
            [self C_ButtonLayerColor_BB];
            break;
        case _Theme_TabrBackColor_BW:
            [self C_TabrBackColor];
            break;
        case _Theme_TabrButtonColor:
            [self C_TabrButtonColor];
            break;
        case _Theme_SepButtonBackTitleBorColor:
            [self C_SepButtonBackTitleBorColor];
            break;
        case _Theme_LineColor_YG:
            [self C_LineColor_YG];
            break;
        case _Theme_Add_Button_Image:
            [self C_Add_Button_Image];
            break;
        case _Theme_Reduc_Button_Image:
            [self C_Reduc_Button_Image];
            break;
        case _Theme_Point_Button_Image:
            [self C_Point_Button_Image];
            break;
        case _Theme_ButtonTintColor_BGreen:
            [self C_ButtonTintColor_BGreen];
            break;
        case _Theme_ButtonTintGreyColor:
            [self C_ButtonTintGreyColor];
            break;
        case _Theme_ButtonTintColor_WB:
            [self C_ButtonTintColor_WB];
            break;
        case _Theme_PriceCategoryButtonStateColor_BY:
            [self C_PriceCategoryButtonStateColor_BY];
            break;
        case _Theme_ViewBackColor_T_YB:
            [self C_ViewBackColor_T_YB];
            break;
        case _Theme_ButtonBac_BY:
            [self C_Theme_ButtonBac_BY];
            break;
        case _Theme_ButtonHeart_T:
            [self C_ButtonHeart_T];
            break;
        case _Theme_PageControl_T:
            [self C_PageControl_T];
            break;
        case _Theme_B_SepButtonSt_T:
            [self C_Theme_B_SepButtonSt_T];
            break;
        case _Theme_HXXD_BottomButton:
            [self C_Theme_HXXD_BottomButton];
            break;
        case _Theme_ButtonBacColor_GB:
            [self C_Theme_ButtonBacColor_GB];
            break;
        case _Theme_ViewBacColor_WB:
            [self C_Theme_ViewBacColor_WB];
            break;
        case _Theme_ViewBacColorBrColor_WB:
            [self C_ViewBacColorBrColor_WB];
            break;

        default:
            break;
    }
}
-(id)T_GetThemeEM:(_ThemeC_EM)EM{
    
    switch (EM) {
        case _Theme_MyPageSectionImage:
        {
            SEL sel = @selector(C_Theme_MyPageSectionImage);
            NSDictionary *thDic = [self getThemeDic:sel];
            return thDic;
        }
            
            break;
        case _Theme_AllImage:
        {
            SEL sel = @selector(C_AllImage);
            NSDictionary *thDic = [self getThemeDic:sel];
            return thDic;
        }
            
            break;
            
        default:
            break;
    }
    return nil;
}
- (void)C_AllImage{}
- (void)C_Theme_MyPageSectionImage{}

- (void)C_ViewBacColorBrColor_WB{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIView *_con = (UIView *)self;
    NSString *nBCS = thDic[@"BacColor"];
    NSString *BCS = thDic[@"BorColor"];
    
    _con.backgroundColor = [self colorFromHexRGB:nBCS];
    _con.layer.borderColor = [self colorFromHexRGB:BCS].CGColor;
}

- (void)C_Theme_ButtonBacColor_GB{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIButton *_con = (UIButton *)self;
    NSString *nBCS = thDic[@"BColor"];
    UIColor *nBColor = [self colorFromHexRGB:nBCS];
    [_con setBackgroundColor:nBColor forState:0];
}

- (void)C_Theme_HXXD_BottomButton{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    if ([self isKindOfClass:[UIButton class]]) {
        UIButton *_con = (UIButton *)self;
        
        NSString *nBCS = thDic[@"BCColor"];
        UIColor *nBColor = [self colorFromHexRGB:nBCS];
        [_con setBackgroundColor:nBColor forState:0];
        [_con setBackgroundColor:nBColor forState:1];

        NSString *sBCS = thDic[@"TColor"];
        UIColor *sBColor = [self colorFromHexRGB:sBCS];
        [_con setTitleColor:sBColor forState:0];
        
    }
    if ([self isKindOfClass:[UIView class]]){
        
        UIView *_con = (UIView *)self;
        NSString *nBCS = thDic[@"VCColor"];
        UIColor *nBColor = [self colorFromHexRGB:nBCS];
        _con.backgroundColor = nBColor;
        
    }
    if ([self isKindOfClass:[UITextField class]]){
        
        UITextField *_con = (UITextField *)self;
        NSString *nBCS = thDic[@"TColor"];
        UIColor *nBColor = [self colorFromHexRGB:nBCS];
        _con.textColor = nBColor;
        
    }
    if ([self isKindOfClass:[UILabel class]]){
        
        UILabel *_con = (UILabel *)self;
        NSString *nBCS = thDic[@"TColor"];
        UIColor *nBColor = [self colorFromHexRGB:nBCS];
        _con.textColor = nBColor;
    }
    
}
- (void)C_Theme_B_SepButtonSt_T{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIButton *_con = (UIButton *)self;

    NSString *nBCS = thDic[@"nBColor"];
    UIColor *nBColor = [self colorFromHexRGB:nBCS];
    
    NSString *sBCS = thDic[@"sBColor"];
    UIColor *sBColor = [self colorFromHexRGB:sBCS];
    
    NSString *nTCS = thDic[@"nTColor"];
    UIColor *nTColor = [self colorFromHexRGB:nTCS];
    
    NSString *sTCS = thDic[@"sTColor"];
    UIColor *sTColor = [self colorFromHexRGB:sTCS];
    
    [_con setBackgroundColor:nBColor forState:0];
    [_con setBackgroundColor:sBColor forState:UIControlStateSelected];
    [_con setBackgroundColor:sBColor forState:1];

    
    [_con setTitleColor:nTColor forState:0];
    [_con setTitleColor:sTColor forState:UIControlStateSelected];


}

- (void)C_PageControl_T{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    
    UIPageControl *_con = (UIPageControl *)self;
    
    if (thDic) {
        NSString *sC = thDic[@"sColor"];
        NSString *nC = thDic[@"nColor"];
        
        _con.currentPageIndicatorTintColor = [ZLBHelper colorFromHexRGB:sC];
        _con.pageIndicatorTintColor = [ZLBHelper colorFromHexRGB:nC];
    }
}

- (void)C_ButtonHeart_T{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    
    UIButton *_con = (UIButton *)self;
    
    if (thDic) {
        NSString *sImage = thDic[@"sImage"];
        NSString *nImage = thDic[@"nImage"];
        [_con setImage:[UIImage imageNamed:nImage] forState:0];
        [_con setImage:[UIImage imageNamed:sImage] forState:UIControlStateSelected];
        [_con setImage:[UIImage imageNamed:sImage] forState:1];
    }
}

#pragma 顶部黄色黑色条 20高
- (void)C_ViewBackColor_T_YB{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    
    UIView *_con = (UIView *)self;
    
    if (thDic) {
        NSString *color1 = thDic[@"color"];
        _con.backgroundColor = [self colorFromHexRGB:color1];
    }
}

#pragma mark 通用颜色 按钮背景色，蓝色 黄色
- (void)C_Theme_ButtonBac_BY{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    
    UIButton *_con = (UIButton *)self;
    
    if (thDic) {
        NSString *color1 = thDic[@"color"];
        NSString *color2 = thDic[@"tcolor"];
  
        [_con setBackgroundColor:[self colorFromHexRGB:color1] forState:0];
        [_con setTitleColor:[self colorFromHexRGB:color2] forState:0];
    }
}
#pragma mark 选中颜色黄色 蓝色 默认白色 透明
- (void)C_PriceCategoryButtonStateColor_BY{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    
    UIButton *_con = (UIButton *)self;
    
    if (thDic) {
        NSString *color1 = thDic[@"nBColor"];
        NSString *color2 = thDic[@"sBColor"];
        NSString *color3 = thDic[@"nTColor"];
        NSString *color4 = thDic[@"sTColor"];
        
        [_con setBackgroundColor:[self colorFromHexRGB:color1] forState:0];
        [_con setBackgroundColor:[self colorFromHexRGB:color2] forState:1];
        [_con setBackgroundColor:[self colorFromHexRGB:color2] forState:UIControlStateSelected];
        
        [_con setTitleColor:[self colorFromHexRGB:color3] forState:0];
        [_con setTitleColor:[self colorFromHexRGB:color4] forState:1];
        [_con setTitleColor:[self colorFromHexRGB:color4] forState:UIControlStateSelected];
    }
}
#pragma mark 选中
- (void)C_Point_Button_Image{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIButton *s = (UIButton *)self;
    if (s) {
        [s setImage:[UIImage imageNamed:thDic[@"nImage"]] forState:0];
        [s setImage:[UIImage imageNamed:thDic[@"cImage"]] forState:1];
        [s setImage:[UIImage imageNamed:thDic[@"cImage"]] forState:UIControlStateSelected];
    }
}
#pragma mark 减号图片
- (void)C_Reduc_Button_Image{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIButton *s = (UIButton *)self;
    if (s) {
        [s setImage:[UIImage imageNamed:thDic[@"nImage"]] forState:0];
        
        [s setImage:[UIImage imageNamed:thDic[@"cImage"]] forState:1];
    }
}
#pragma mark 加号图片
- (void)C_Add_Button_Image{

    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIButton *s = (UIButton *)self;
    if (s) {
        [s setImage:[UIImage imageNamed:thDic[@"nImage"]] forState:0];
        [s setImage:[UIImage imageNamed:thDic[@"cImage"]] forState:1];
    }
}

#pragma mark 黄色线 灰色线
- (void)C_LineColor_YG{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    
    UIView *s = (UIView *)self;
    
    if (thDic) {
        NSString *color = thDic[@"Color"];
        s.backgroundColor = [self colorFromHexRGB:color];
    }
}

#pragma mark 下单器分段按钮
- (void)C_SepButtonBackTitleBorColor{

    NSDictionary *thDic = [self getThemeDic:_cmd];
    
    UIButton *_con = (UIButton *)self;
    
    if (thDic) {
        NSString *color1 = thDic[@"nBacColor"];
        NSString *color2 = thDic[@"sBacColor"];
        NSString *color3 = thDic[@"nTitleColor"];
        NSString *color4 = thDic[@"sTitleColor"];

        [_con setBackgroundColor:[self colorFromHexRGB:color1] forState:0];
        [_con setBackgroundColor:[self colorFromHexRGB:color2] forState:1];
        [_con setBackgroundColor:[self colorFromHexRGB:color2] forState:UIControlStateSelected];
        
        [_con setTitleColor:[self colorFromHexRGB:color3] forState:0];
        [_con setTitleColor:[self colorFromHexRGB:color4] forState:1];
        [_con setTitleColor:[self colorFromHexRGB:color4] forState:UIControlStateSelected];

    }

    
}

#pragma mark tabr选中字体颜色，未选中默认都是灰色
- (void)C_TabrButtonColor{

    NSDictionary *thDic = [self getThemeDic:_cmd];
    
    UIButton *s = (UIButton *)self;
    
    if (thDic) {
        NSString *color = thDic[@"TintColor"];
        [s setTintColor:[self colorFromHexRGB:color]];
    }
}

#pragma mark 控制器背景色 ,基类控制器写一次
- (void)C_ViewControllerBacColor{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    
    UIViewController *s = (UIViewController *)self;

    if (thDic) {
        NSString *color = thDic[@"color"];
        s.view.backgroundColor = [self colorFromHexRGB:color];
    }
}
- (void)C_Theme_ViewBacColor_WB{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    
    UIView *s = (UIView *)self;
    
    if (thDic) {
        NSString *color = thDic[@"BColor"];
        s.backgroundColor = [self colorFromHexRGB:color];
    }
}

#pragma mark view 背景颜色
- (void)C_BackgroungColor{

    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIView *s = (UIView *)self;

    if (thDic) {
        NSString *color = thDic[@"color"];
        s.backgroundColor = [self colorFromHexRGB:color];
    }
}

#pragma mark view 灰色字体颜色
- (void)C_GreyFontColor {
    NSDictionary *thDic = [self getThemeDic:_cmd];
    if ([self isKindOfClass:[UILabel class]]) {
        UILabel *s = (UILabel *)self;
        if (thDic) {
            NSString *color = thDic[@"color"];
            s.textColor = [self colorFromHexRGB:color];
        }
    }else if ([self isKindOfClass:[UIButton class]]) {
        UIButton *s = (UIButton *)self;
        if (thDic) {
            NSString *color = thDic[@"color"];
            [s setTitleColor:[self colorFromHexRGB:color] forState:UIControlStateNormal];
        }
    }else if ([self isKindOfClass:[UITextField class]]) {
        UITextField *s = (UITextField *)self;
         NSString *color = thDic[@"color"];
        s.textColor = [self colorFromHexRGB:color];
    }
   
}

#pragma mark tabr背景色
- (void)C_TabrBackColor{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIView *s = (UIButton *)self;
    if (thDic) {
        NSString *color = thDic[@"color"];
        s.backgroundColor = [self colorFromHexRGB:color];
    }
}

#pragma mark view 通用字体颜色
- (void)C_NomalFontColor {
    NSDictionary *thDic = [self getThemeDic:_cmd];
    if ([self isKindOfClass:[UILabel class]]) {
        UILabel *s = (UILabel *)self;
        if (thDic) {
            NSString *color = thDic[@"color"];
            s.textColor = [self colorFromHexRGB:color];
        }
    }else if ([self isKindOfClass:[UIButton class]]) {
        UIButton *s = (UIButton *)self;
        if (thDic) {
            NSString *color = thDic[@"color"];
            [s setTitleColor:[self colorFromHexRGB:color] forState:UIControlStateNormal];
        }
    }else if ([self isKindOfClass:[UITextField class]]) {
        UITextField *s = (UITextField *)self;
        NSString *color = thDic[@"color"];
        s.textColor = [self colorFromHexRGB:color];
    }
}

#pragma mark view 自选和市场点击按钮颜色
- (void)C_ViewColor_Grey{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIView *s = (UIButton *)self;
    
    if (thDic) {
        NSString *color = thDic[@"color"];
        s.backgroundColor = [self colorFromHexRGB:color];
    }
}
#pragma mark 按钮背景色，蓝色黑色白色，
- (void)C_Theme_ButtonBacColor_BB{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIButton *s = (UIButton *)self;
    
    if (thDic) {
        NSString *selecBColor = thDic[@"selecBColor"];
        NSString *selecTColor = thDic[@"selecTColor"];
        NSString *nBColor = thDic[@"nBColor"];
        NSString *nTColor = thDic[@"nTColor"];

        [s setTitleColor:[self colorFromHexRGB:nTColor] forState:0];
        [s setTitleColor:[self colorFromHexRGB:selecTColor] forState:UIControlStateSelected];

        [s setBackgroundImage:[ZLBHelper createImageWithColor:[self colorFromHexRGB:nBColor]] forState:0];
        [s setBackgroundImage:[ZLBHelper createImageWithColor:[self colorFromHexRGB:selecBColor]] forState:UIControlStateSelected];
    }
}



- (void)C_Theme_TableBacColor{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UITableView *s = (UITableView *)self;
    if (thDic) {
        NSString *color = thDic[@"color"];
        s.backgroundColor = [self colorFromHexRGB:color];
    }
}

#pragma mark view 自选和市场按钮框的颜色
- (void)C_ZixunShichangButtonBordColor{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIView *s = (UIView *)self;
    
    if (thDic) {
        NSString *color = thDic[@"color"];
        s.layer.borderColor = [self colorFromHexRGB:color].CGColor;
    }
}

#pragma mark view 我的页面顶部
- (void)C_Theme_BackColor_YB{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIView *s = (UIView *)self;
    if (thDic) {
        NSString *color = thDic[@"color"];
        s.backgroundColor = [self colorFromHexRGB:color];
    }
}
#pragma mark view 线条颜色
- (void)C_Theme_LineColor{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIView *s = (UIView *)self;
    
    if (thDic) {
        NSString *color = thDic[@"color"];
        s.backgroundColor= [self colorFromHexRGB:color];
    }
}

#pragma mark view iterm选择的颜色
- (void)C_ButtonFontColor_BW{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIButton *s = (UIButton *)self;
    
    if (thDic) {
        NSString *color = thDic[@"color"];
        [s setTitleColor:[self colorFromHexRGB:color] forState:UIControlStateNormal];
    }
}

#pragma mark view iterm未选择的颜色
- (void)C_ButtonFontColor_WG{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIButton *s = (UIButton *)self;
    
    if (thDic) {
        NSString *color = thDic[@"color"];
        [s setTitleColor:[self colorFromHexRGB:color] forState:UIControlStateNormal];
    }
}

#pragma mark view iterm下面的线的颜色
- (void)C_ViewColor_BlueY{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    
    if ([self isKindOfClass:[UIImageView class]]) {
        UIImageView *s = (UIImageView *)self;
        if (thDic) {
            NSString *color = thDic[@"color"];
            [s setTintColor:[self colorFromHexRGB:color]];
        }
    }else if ([self isKindOfClass:[UIView class]]){
        UIView *s = (UIView *)self;
        
        if (thDic) {
            NSString *color = thDic[@"color"];
            s.backgroundColor = [self colorFromHexRGB:color];
        }
    }
}

#pragma mark 交易头部view颜色
- (void)C_ViewColor_BlackY{
    
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIView *s = (UIView *)self;
    
    if (thDic) {
        NSString *color = thDic[@"color"];
        s.backgroundColor = [self colorFromHexRGB:color];
    }
}

#pragma mark view 背景色
- (void)C_ViewComBackColor{

    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIView *s = (UIView *)self;
    
    if (thDic) {
        NSString *color = thDic[@"color"];
        s.backgroundColor = [self colorFromHexRGB:color];
    }
}

#pragma mark label字体颜色 黑白
- (void)C_Theme_LabelTextColor_WB{
    [self C_NomalFontColor];
}

- (void)C_Theme_BackColor_WB{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIButton *s = (UIButton *)self;
    if (thDic) {
        NSString *color = thDic[@"color"];
        s.backgroundColor = [self colorFromHexRGB:color];
    }
}
#pragma mark 按钮tint颜色，字体颜色，边框颜色
- (void)C_Theme_ButtonTintColor_BY{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIButton *s = (UIButton *)self;
    if (thDic) {
        NSString *color = thDic[@"tintColor"];
        UIColor *cc = [self colorFromHexRGB:color];
        [s setTintColor:cc];
        [s setTitleColor:cc forState:0];
        s.layer.borderColor = cc.CGColor;
    }
}
#pragma mark 按钮tint颜色，蓝色，灰色
- (void)C_Theme_ButtonTintColor_BG{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIButton *s = (UIButton *)self;
    if (thDic) {
        NSString *color = thDic[@"tintColor"];
        UIColor *cc = [self colorFromHexRGB:color];
        [s setTintColor:cc];
        s.layer.borderColor = cc.CGColor;
    }
}

#pragma mark 按钮tint颜色，蓝色，绿色
- (void)C_ButtonTintColor_BGreen{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIButton *s = (UIButton *)self;
    if (thDic) {
        NSString *color = thDic[@"tintColor"];
        UIColor *cc = [self colorFromHexRGB:color];
        [s setTintColor:cc];
        s.layer.borderColor = cc.CGColor;
    }
}

#pragma mark 按钮tint颜色，灰色
- (void)C_ButtonTintGreyColor{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIButton *s = (UIButton *)self;
    if (thDic) {
        NSString *color = thDic[@"tintColor"];
        UIColor *cc = [self colorFromHexRGB:color];
        [s setTintColor:cc];
        s.layer.borderColor = cc.CGColor;
    }
}

#pragma mark 按钮tint白色，黑色
- (void)C_ButtonTintColor_WB{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIButton *s = (UIButton *)self;
    if (thDic) {
        NSString *color = thDic[@"tintColor"];
        UIColor *cc = [self colorFromHexRGB:color];
        [s setTintColor:cc];
        s.layer.borderColor = cc.CGColor;
    }
}

#pragma mark 按钮tint颜色，baise，灰色
- (void)C_Theme_ButtonTintColor_WG{
    NSDictionary *thDic = [self getThemeDic:_cmd];
    UIButton *s = (UIButton *)self;
    if (thDic) {
        NSString *color = thDic[@"tintColor"];
        UIColor *cc = [self colorFromHexRGB:color];
        [s setTintColor:cc];
        s.layer.borderColor = cc.CGColor;
    }
}

#pragma mark view 通用字体颜色灰色黑色
- (void)C_FontColor_GB {
    NSDictionary *thDic = [self getThemeDic:_cmd];
    if ([self isKindOfClass:[UILabel class]]) {
        UILabel *s = (UILabel *)self;
        if (thDic) {
            NSString *color = thDic[@"color"];
            s.textColor = [self colorFromHexRGB:color];
        }
    }else if ([self isKindOfClass:[UIButton class]]) {
        UIButton *s = (UIButton *)self;
        if (thDic) {
            NSString *color = thDic[@"color"];
            [s setTitleColor:[self colorFromHexRGB:color] forState:UIControlStateNormal];
        }
    }
}

#pragma mark 图片颜色 灰色  黑色
- (void)C_ButtonImgColor_GB {
    NSDictionary *thDic = [self getThemeDic:_cmd];
     if ([self isKindOfClass:[UIButton class]]) {
        UIButton *s = (UIButton *)self;
        if (thDic) {
            NSString *color = thDic[@"color"];
            [s setTintColor:[self colorFromHexRGB:color]];
        }
    }else if ([self isKindOfClass:[UIImageView class]]) {
        UIImageView *s = (UIImageView *)self;
        NSString *color = thDic[@"color"];
        [s setTintColor:[self colorFromHexRGB:color]];
    }
    
}

#pragma mark 图片颜色 蓝色  黑色
- (void)C_ButtonTintColor_BB {
    NSDictionary *thDic = [self getThemeDic:_cmd];
    if ([self isKindOfClass:[UIButton class]]) {
        UIButton *s = (UIButton *)self;
        if (thDic) {
            NSString *color = thDic[@"color"];
            [s setTintColor:[self colorFromHexRGB:color]];
        }
    }else if ([self isKindOfClass:[UIImageView class]]) {
        UIImageView *s = (UIImageView *)self;
        NSString *color = thDic[@"color"];
        [s setTintColor:[self colorFromHexRGB:color]];
    }
    
}

#pragma mark button layer 颜色 蓝色  黑色
- (void)C_ButtonLayerColor_BB {
    NSDictionary *thDic = [self getThemeDic:_cmd];
    if ([self isKindOfClass:[UIButton class]]) {
        UIButton *s = (UIButton *)self;
        if (thDic) {
            NSString *color = thDic[@"color"];
            s.layer.borderColor = [self colorFromHexRGB:color].CGColor;
        }
    }
    
}

- (NSDictionary *)getThemeDic:(SEL)sel{

    return [ThemeManager shareInstance].themeDic[NSStringFromSelector(sel)];
}


//- (void)setObj:(id)obj{
//
//    objc_setAssociatedObject(self, &ObjSave,obj, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
//}
//- (id)getObj{
//    return objc_getAssociatedObject(self, &ObjSave);
//}

- (void)setThemeEM_V:(_ThemeC_EM)EM {
    objc_setAssociatedObject(self, &ThemeEM_AID,[NSString stringWithFormat:@"%ld",EM], OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

- (_ThemeC_EM)getThemEM{
   return [objc_getAssociatedObject(self, &ThemeEM_AID) integerValue];
}

- (void)removeObserver{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}


- (UIColor *)colorFromHexRGB:(NSString *)inColorString
{
    UIColor *result = nil;
    unsigned int colorCode = 0;
    unsigned char redByte, greenByte, blueByte;
    
    if (nil != inColorString)
    {
        NSScanner *scanner = [NSScanner scannerWithString:inColorString];
        (void) [scanner scanHexInt:&colorCode];
    }
    redByte = (unsigned char) (colorCode >> 16);
    greenByte = (unsigned char) (colorCode >> 8);
    blueByte = (unsigned char) (colorCode);
    result = [UIColor
              colorWithRed: (float)redByte / 0xff
              green: (float)greenByte/ 0xff
              blue: (float)blueByte / 0xff
              alpha:1.0];
    return result;
}

@end
